name: Deploy Infrastructure with Terraform

on:
  push:
    branches:
      - master
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    EC2_AMI:   ${{ secrets.EC2_AMI }}
    NAMESPACE: ${{ secrets.NAMESPACE }}
    USER: ${{ secrets.USER }}
jobs:
  build:
    name: DotAI Build Job
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Terraform
      run: |
        wget https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
        unzip terraform_1.3.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Configure remote state
      run: |
        terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Plan
      run: |
        terraform plan -var 'pa_token=${{ secrets.GIT_TOKEN }}'  -var 'namespace=${{ secrets.NAMESPACE }}' -var 'user=${{ secrets.USER }}' -var 'ec2_ami=${{ secrets.EC2_AMI }}' -var 'repository=${{ secrets.REPOSITORY }}'

    - name: Terraform Apply
      run: |
        terraform apply -var 'pa_token=${{ secrets.GIT_TOKEN }}' -var 'namespace=${{ secrets.NAMESPACE }}' -var 'repository=${{ secrets.REPOSITORY }}' -var 'user=${{ secrets.USER }}' -var 'ec2_ami=ami-04bad3c587fe60d89' -auto-approve

    - name: Make Terraform output an environment variable
      id: get_output
      run: |
        export BUCKET_NAME=$(terraform output s3_bucket_name)
        echo "The S3 Bucket Name is: $BUCKET_NAME"
        echo "bucket_name=$BUCKET_NAME" >> $GITHUB_ENV
    
 
    - name: SSH into Virtual Machine
      id: ssh
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.IP_HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Successfully connected to the virtual machine"
          sudo apt-get update
          sudo apt-get install -y make build-essential ruby-full
          sudo apt-get install -y --reinstall zlibc zlib1g zlib1g-dev

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.7.7'
        bundler-cache: true

    - name: Install dependencies
      run: bundle install
      working-directory: jekyll-bootstrap

    - name: Build Jekyll site
      run: bundle exec jekyll build -d _gh_pages
      working-directory: jekyll-bootstrap

    - name: Create version file
      run: |
        echo -e "Job: $GITHUB_JOB \nBuild: $GITHUB_RUN_ID" > _gh_pages/version.txt
        cat _gh_pages/version.txt
      working-directory: jekyll-bootstrap

    - run: |
        cd jekyll-bootstrap

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to S3
      run: aws s3 sync _gh_pages s3://${{ env.bucket_name }} --delete
      working-directory: jekyll-bootstrap


