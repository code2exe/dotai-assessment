name: Deploy Infrastructure with Terraform

on:
  push:
    branches:
      - master
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    EC2_AMI:   ${{ secrets.EC2_AMI }}
    NAMESPACE: ${{ secrets.NAMESPACE }}
    USER: ${{ secrets.USER }}
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    # GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      run: |
        wget https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
        unzip terraform_1.3.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Configure remote state
      run: |
        terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Plan
      run: |
        terraform plan -var 'pa_token=${{ secrets.GIT_TOKEN }}'  -var 'namespace=${NAMESPACE}' -var 'user=${USER}' -var 'ec2_ami=${{ secrets.EC2_AMI }}' -var 'repository=${{ secrets.REPOSITORY }}'

    - name: Terraform Apply
      run: |
        terraform apply -var 'pa_token=${{ secrets.GIT_TOKEN }}' -var 'namespace=${NAMESPACE}' -var 'repository=${{ secrets.REPOSITORY }}' -var 'user=${USER}' -var 'ec2_ami=ami-04bad3c587fe60d89' -auto-approve

    - name: Get output
      id: get_output
      run: |
        export IP_ADDRESS=$(terraform output instance_ip_addr)
        echo "The IP address is: $IP_ADDRESS"
        echo "ip=$IP_ADDRESS" >> $GITHUB_ENV
    
    # - run: echo ${{ env.ip }}

    # - name: Create GitHub Actions Secret
    #   uses: gliech/create-github-secret-action@v1
    #   with:
    #     name: HOST
    #     value: ${{ env.ip }}
    #     pa_token: ${{ secrets.GIT_TOKEN }}
  
    - name: SSH into Virtual Machine
      id: ssh
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.IP_HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          echo "Successfully connected to the virtual machine"
          sudo apt-get update
     
    # - name: SSH VM
    #   uses: garygrossgarten/github-action-ssh@release
    #   with:
    #     command: |
    #       sudo apt update
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USER }}
    #     # passphrase: ${{ secrets.PASSPHRASE }}
    #     privateKey: ${{ secrets.PRIVATE_KEY }}
