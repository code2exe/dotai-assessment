name: Deploy Terraform

on:
  push:
    branches:
      - master
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    EC2_AMI:   ${{ secrets.EC2_AMI }}
    NAMESPACE: ${{ secrets.NAMESPACE }}
    REPOSITORY: ${{ secrets.REPOSITORY }}
    TOKEN: ${{ secrets.TOKEN }}
    USER: ${{ secrets.USER }}
    VPC_CIDR_BLOCK: ${{ secrets.VPC_CIDR_BLOCK }}
    VPC_SUBNET_CIDR: ${{ secrets.VPC_SUBNET_CIDR }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      run: |
        wget https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
        unzip terraform_1.3.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/

    # - name: Configure remote state
    #   run: |
    #     terraform init -backend-config="access_key=${secrets.AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${secrets.AWS_SECRET_ACCESS_KEY}" -backend-config="bucket=${secrets.TF_STATE_BUCKET}" -backend-config="region=${secrets.AWS_REGION}" -backend-config="path=tf.tfstate"
      
    - name: Configure remote state
      run: |
        terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        TF_LOG=DEBUG terraform plan -var 'namespace=${NAMESPACE}' -var 'vpc_cidr_block=${VPC_CIDR_BLOCK}' -var 'vpc_subnet_cidr=${VPC_SUBNET_CIDR}' -var 'aws_secret_key=${AWS_SECRET_ACCESS_KEY}' -var 'aws_access_key=${AWS_ACCESS_KEY_ID}' -var 'aws_region=${AWS_REGION}' -var 'user=${USER}' -var 'ec2_ami=${EC2_AMI}' -var 'github_token=${TOKEN}' -var 'repository=${REPOSITORY}'

    # - name: Terraform Apply
    #   run: |
    #     terraform apply -var-file=production.tfvars -auto-approve
