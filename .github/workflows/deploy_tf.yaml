name: Deploy Infrastructure with Terraform

on:
  push:
    branches:
      - master
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    EC2_AMI:   ${{ secrets.EC2_AMI }}
    NAMESPACE: ${{ secrets.NAMESPACE }}
    USER: ${{ secrets.USER }}
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    # VPC_CIDR_BLOCK: ${{ secrets.VPC_CIDR_BLOCK }}
    # VPC_SUBNET_CIDR: ${{ secrets.VPC_SUBNET_CIDR }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Terraform
      run: |
        wget https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
        unzip terraform_1.3.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Configure remote state
      run: |
        terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Plan
      run: |
        terraform plan -var 'namespace=${NAMESPACE}' -var 'user=${USER}' -var 'ec2_ami=${EC2_AMI}'

    - name: Terraform Apply
      run: |
        terraform apply -var 'namespace=${NAMESPACE}' -var 'user=${USER}' -var 'ec2_ami=ami-04bad3c587fe60d89' -auto-approve

    - name: Get output
      run: |
        export IP_ADDRESS=$(terraform output instance_ip_addr)
        echo "The IP address is: $IP_ADDRESS"

    - name: Create Secret
      run: |
        export IP_ADDRESS=$(terraform output instance_ip_addr)
        echo "The IP address is: $IP_ADDRESS"
        echo "::set-output name=host::$IP_ADDRESS"
        export SSH_PRIVATE_KEY=$(terraform output tls)
        echo "The SSH Key is: $SSH_PRIVATE_KEY"
        echo "::set-output name=key::$SSH_PRIVATE_KEY"

    # - name: Create Secret
    #   env:
    #     IP_ADDRESS: ${{ env.IP_ADDRESS }}
    #   run: |
    #     echo "::set-output name=secret_name::HOST"
    #     echo "::set-output name=secret_value::$IP_ADDRESS"
    #     echo "Creating secret..."

    - name: SSH into Virtual Machine

      uses: appleboy/ssh-action@master
      with:
        host: ${{ steps.create_secret.outputs.host }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Successfully connected to the virtual machine"
          sudo apt-get update

    # - name: Create GitHub Secret Action
    #   env:
    #     TOKEN: ${{ secrets.GIT_TOKEN }}
    #   uses: gliech/create-github-secret-action@v1.4.10
    #   with:
    #     location: code2exe/dotai-assessment
    #     name: ${{ steps.create_secret.outputs.secret_name }}
    #     value: ${{ steps.create_secret.outputs.secret_value }}
    #     pa_token: $TOKEN
    
    # - name: Create Action secrets
    #   uses: hmanzur/actions-set-secret@v2.0.0
    #   with:
    #     name: ${{ steps.create_secret.outputs.secret_name }}
    #     value: ${{ steps.create_secret.outputs.secret_value }}
    #     repository: code2exe/dotai-assessment
    #     token: ${{ secrets.GIT_TOKEN }}

    # - name: Set up SSH key
    #   uses: shimataro/ssh-key-action@v2
    #   with:
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}

    # - name: SSH into Virtual Machine
    #   # env:
    #   #   IP_ADDRESS: ${{ sec }}
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USER }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       echo "Successfully connected to the virtual machine"
    #       sudo apt-get update